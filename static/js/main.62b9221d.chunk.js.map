{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","types/SelectedTodosType.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/TodoFilter/TodoFilter.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","todoModel","handelEyeBtn","className","map","todo","classNames","id","completed","title","type","onClick","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectedTodosType","getUser","userId","Loader","TodoModal","closeTodoModel","useState","isUserLoading","setIsUserLoading","userName","setUserName","userEmail","setUserEmail","getUserFromApi","userFromApi","name","email","useEffect","href","TodoFilter","query","setQuery","selectedTodosType","handelSelectedTodosType","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","App","isLoading","setIsLoading","setTodos","visiableTodos","setVisiableTodos","selectedTods","setSelectedTodos","setTodoModel","getTodosFromApi","useCallback","a","catch","handelVisiableTodos","checkTitle","toLowerCase","includes","filter","newModel","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62b9221d.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  todoModel: Todo | null,\n  handelEyeBtn: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, todoModel, handelEyeBtn } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': todo.id === todoModel?.id },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-success': todo.completed },\n                { 'has-text-danger': !todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handelEyeBtn(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames(\n                      { 'far fa-eye-slash': todo.id === todoModel?.id },\n                      { 'far fa-eye': todo.id !== todoModel?.id },\n                    )}\n                  />\n\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SelectedTodosType {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo,\n  closeTodoModel: () => void\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  closeTodoModel,\n}) => {\n  const [isUserLoading, setIsUserLoading] = useState(true);\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n\n  const getUserFromApi = async (userId: number) => {\n    const userFromApi = await getUser(userId);\n\n    if (userFromApi) {\n      setIsUserLoading(false);\n\n      setUserName(userFromApi.name);\n      setUserEmail(userFromApi.email);\n    }\n  };\n\n  useEffect(() => {\n    getUserFromApi(todo.userId);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => closeTodoModel()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${userEmail}`}>\n                {userName}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { SelectedTodosType } from '../../types/SelectedTodosType';\n\ntype Props = {\n  query: string,\n  setQuery: (value: string) => void,\n  selectedTodosType: SelectedTodosType,\n  handelSelectedTodosType: (value: SelectedTodosType) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = (props) => {\n  const {\n    query,\n    setQuery,\n    selectedTodosType,\n    handelSelectedTodosType,\n  } = props;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedTodosType}\n            onChange={(event) => {\n              handelSelectedTodosType(event.target.value as SelectedTodosType);\n            }}\n          >\n            <option value={SelectedTodosType.All}>All</option>\n            <option value={SelectedTodosType.Active}>Active</option>\n            <option value={SelectedTodosType.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Loader } from './components/Loader';\nimport { TodoFilter } from './components/TodoFilter';\nimport { SelectedTodosType } from './types/SelectedTodosType';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visiableTodos, setVisiableTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectedTods, setSelectedTodos] = useState<SelectedTodosType>(SelectedTodosType.All);\n  const [todoModel, setTodoModel] = useState<Todo | null>(null);\n\n  const getTodosFromApi = useCallback(\n    async () => {\n      setIsLoading(true);\n\n      await getTodos()\n        .then(res => {\n          setTodos(res);\n          setVisiableTodos(res);\n        })\n        .catch(() => setIsLoading(false))\n        .then(() => setIsLoading(false));\n    },\n    [],\n  );\n\n  useEffect(() => {\n    getTodosFromApi();\n  }, []);\n\n  const handelVisiableTodos = useCallback(\n    () => {\n      const checkTitle = (title: string) => {\n        return title.toLowerCase().includes(query.toLowerCase());\n      };\n\n      setVisiableTodos(todos.filter(todo => {\n        if (selectedTods === SelectedTodosType.Completed) {\n          return todo.completed && checkTitle(todo.title);\n        }\n\n        if (selectedTods === SelectedTodosType.Active) {\n          return !todo.completed && checkTitle(todo.title);\n        }\n\n        return checkTitle(todo.title);\n      }));\n    },\n    [query, selectedTods],\n  );\n\n  useEffect(() => {\n    handelVisiableTodos();\n  }, [query, selectedTods]);\n\n  const handelSetTodoModel = (id: number) => {\n    const newModel = visiableTodos.find(todo => todo.id === id) || null;\n\n    setTodoModel(newModel);\n  };\n\n  const handelCloseTodoModel = () => {\n    setTodoModel(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                selectedTodosType={selectedTods}\n                handelSelectedTodosType={setSelectedTodos}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                ) : (\n                  <TodoList\n                    todos={visiableTodos}\n                    todoModel={todoModel}\n                    handelEyeBtn={handelSetTodoModel}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoModel !== null && (\n        <TodoModal\n          todo={todoModel}\n          closeTodoModel={handelCloseTodoModel}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}